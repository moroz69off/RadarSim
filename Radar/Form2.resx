<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAEAAAABgAA
        AAYAAAAGAAAABgAAAAYAAAAGAAAABAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAQAAAAGAAA
        AB4AAAAkAAAAJgAAACYAAAAmAAAAJgAAACQAAAAeAAAAFgAAAA4AAAAIAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAwAAAAaAAAAKgAA
        ADwAAABIAAAAUAAAAFYDAwNiAwMDagEBAWoAAABiAAAAVgAAAFAAAABGAAAAOAAAACgAAAAWAAAACgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAASAAAALgAA
        AEgAAABcCgoKdCMjI6koKCjVJiYm8ygoKP8tLS3/KCgo/x0dHf8aGhrzGhoa0xcXF6kHBwdyAAAAWgAA
        AEQAAAAoAAAADgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgAA
        ADQAAABcEBAQejw8PMVLS0v7eXl5/7Ozs//V1tX/zdPN/8TLxP+/x7//zdLM/9XW1f+zs7P/dnZ2/0BA
        QPsuLi7HDQ0NegAAAFYAAAAsAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAeAAAAVjY2NqVgYGD3nJyc/9vc2v+PnI7/O1I6/wgmBf8QLA7/MEwv/yA+Hv8NKQv/ByYF/zpS
        Of+Pm47/2tva/5ubm/9VVVX3LS0towAAAEoAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgMDAyRXV1e1iYmJ/9vc2/+LmIr/ES4Q/wIiAP8CIwD/AiIA/w4wDP8uTSz/HkEc/xE1
        Dv8IKgX/AiMA/wIiAP9Ti07/lMyN/9zd3P+Dg4P/S0tLsQQEBBoAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAGBgYCdXV1nampqf/d4N3/PVM7/wIiAP8CIgD/CCcG/ypFKf86Wjn/PWE8/01r
        TP9AXz7/P109/0FdP/8zTzD/G0sX/1iwUP8Zowz/T7M//+Hr3P+lpaX/ZmZmnQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH9/f3C3t7f/3uHe/yQ/Iv8CIwD/AyMB/ytGKf81TjP/Dy0N/wMl
        Af8cRhz/R2VG/zpYOf8bPhj/FTcS/x89G/9xqG3/OLst/xykDv8fpQ//PrAp/+Lv3P+ys7L/bm5ucgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLi4sqsrKy+e/w7/8ySTD/AyQA/wcnBP87VDn/FTIT/wIi
        AP8FKAP/CzIK/xxCG/9CX0H/NFIy/yVDI/8aOBf/LVso/1m1UP9KvS7/ruNy/0e1Jf8fpg//TLU0//H2
        7/+pqan5d3d3LAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJycnLv4+Pj/cIFv/wMkAP8FJQL/PFU7/wws
        Cf8FKwT/CTEJ/zJVM/84TTb/JjYl/zZINv8uQy3/Ok03/0NVQf9vpmv/KK4b/2zGO//i8pj/iddb/yGm
        D/8fpQ7/hMtu//j4+P+NjY29AAAAAAAAAAAAAAAAAAAAAAAAAACVlZU4xMTE/9XZ1f8TMBH/CysJ/zNN
        Mf8RMhD/CUAL/xNEFP9BX0H/HTgb/4aOT/8XKhT/TFlL/y42Lv8ADAD/Hz8d/1KySf8/vzP/KakV/0m1
        I/8vrhv/P74x/x+lDv8lpg7/3e/U/729vf+CgoI6AAAAAAAAAAAAAAAAAAAAAJqamp3j4+P/anxp/yM/
        If8lQSP/M1Ay/wY1B/8PSBL/QGBB/wUWBP8CDwH/MUIu/ztCO/9LTkv/Oz06/zg8OP9mmmH/G6AM/x6i
        Df9BvzT/IaYQ/yCmD/85uiv/Kq4Z/x+mD/97x2P/5OTk/4mJiZ8AAAAAAAAAAAAAAACfn58CpKSk6ers
        6v8tRiv/L0kt/09lTf8aQhr/EUoU/zpnPf8ZRhz/FDYW/0NTRP83Sjj/AQ0A/xwuGv8IHQb/KEUl/1G0
        SP88ujD/HJ8K/yKlEf88uy7/H6UO/yGnEP9BwDP/H6UO/zGpFP/s8Or/mJiY64yMjAIAAAAAAAAAAKCg
        oCinp6f/v8e//ztUOf87VDn/V2xW/yVXJ/8iVyb/P2lC/xVEGf9AYkP/OVo7/zddL/9TcS3/U3dF/yda
        I/9gn1v/G6EL/ymlGv80sSf/GpoJ/ze1Kf8goxD/HKEL/zy7L/8coQv/HJ0I/8njvP+goJ//jY2NKgAA
        AAAAAAAAoaGhUq2trf+VopT/V2xV/1FoUP9UcVT/MWQ0/0t1S/9Pc0P/H0kj/1BuU/8mVCj/U4NA/4Or
        Wv9VlDX/Ookz/0CtNv8ZoQv/F5MI/zivLv8Xjgn/HpgR/yypIf8Ylgr/K6kg/yCfFP8elBL/nciO/6mp
        qf+NjY1UAAAAAAAAAACioqJmqqqq/4SUg/9tf2z/ZXlj/1dzV/9KdU3/bI1m/46idP88Xz3/RGJH/zBc
        MP8ucSj/R5c0/1aMTv9xtmj/HK0Q/ymmHv8dkBL/J5gd/ymQIP8qiyH/LqYl/zKTKf8clhP/I50a/ymN
        If+AsXL/qKmo/4+Pj2gAAAAAAAAAAKOjo2yhoaH/kJ2P/4mWiP+DkoL/c4Vy/2uLbP90kXb/Z4Fn/1t1
        Xf9cc17/V3tY/0iERf9MmUb/mJuY/5i2k/81sC3/R6dB/zqSNP85kTT/RJQ//0WMP/9DpD3/R5JC/zST
        Lf88nTb/QI47/4aufv+foJ//j4+PbgAAAAAAAAAAo6OjYJOTk/+Nm4z/gZCA/3eJdv9tgGz/Wnta/2qK
        a/9KbEz/Q2FG/1hvWf8xXDL/KGYk/zCFKf9apFP/OK8z/xKjCf8SlQr/EH4I/ySRHv8YehH/GHoQ/yeb
        If8gghj/G40T/x2PFf8igRr/hKx7/5CQkP+Pj49iAAAAAAAAAAChoaFEgICA/6Ktof98jXv/eYt4/4CR
        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
        AA/4AAAf/AAAP/4AAH//AAD//8AD///4H/8=
</value>
  </data>
</root>